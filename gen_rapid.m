%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Generador de codigo RAPID a partir de trayectorias almacenadas en
% waypoints 
% Entradas:
% Ver comentarios
% Salidas:
% Genera un archivo de texto con el codigo RAPID de la trayectorias
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function gen_rapid(varargin)
% Entradas
% Array de MTH con way points - T
% Configuraciones del robot para cada pose - cfg
% Nombre archivo - nombre
% vel - veldata 1. para movej 2. para movel
% zone -  zonedata
switch nargin
   case 2
      T = cell2mat(varargin(1));
      cfg = cell2mat(varargin(2));
      nombre = 'mod1';
   case 3
      T = cell2mat(varargin(1));
      cfg = cell2mat(varargin(2));
      nombre = cell2mat(varargin(3));
   case 4
      T = cell2mat(varargin(1));
      cfg = cell2mat(varargin(2));
      nombre = cell2mat(varargin(3));
      vel = cell2mat(varargin(4));      
   case 5
      T = cell2mat(varargin(1));
      cfg = cell2mat(varargin(2));
      nombre = cell2mat(varargin(3));   
      vel = cell2mat(varargin(4));
      zone = cell2mat(varargin(5));      
end
n_rtar = size(T,3); % Cantidad de poses
% Archivo
f_name = strcat(nombre,'.txt'); % Nombre del archivo
fileID = fopen(f_name,'w');
%fprintf(fileID,'! Module generated by Matlab \r\n');
% Creacion de modulo
fprintf(fileID,'MODULE Module1\r\n');
fprintf(fileID,'\r\n');

% Definicion de robotargets
for i=1:n_rtar
   name = ['p' num2str(i)];
   pos = T(1:3,4,i);
   q = R2Qua(T(1:3,1:3,i));
   rtar = rob_tar_gen(name,pos,q,cfg(:,:,i));
   fprintf(fileID,[rtar '\r\n']);
end
fprintf(fileID,'\r\n');

% Procedimiento principal
fprintf(fileID,'PROC main() \r\n');
fprintf(fileID, '! Main \r\n');
fprintf(fileID,'ENDPROC\r\n');
fprintf(fileID,'\r\n');

% Procedimiento con trayectoria
fprintf(fileID,'PROC traj1() \r\n');
fprintf(fileID,'! Trayectoria \r\n');

for i=1:n_rtar
   name = ['p' num2str(i)];
   if i == 1
      if nargin == 4
         mov = mov_gen('J',name,vel(1),0);
      elseif nargin == 5 
         mov = mov_gen('J',name,vel(1),zone);
      else   
         mov = mov_gen('J',name,1000,0);
      end
   else
      if nargin == 4
         mov = mov_gen('L',name,vel(2),0);
      elseif nargin == 5 
         mov = mov_gen('L',name,vel(2),zone);
      else   
         mov = mov_gen('L',name);
      end      
   end
   fprintf(fileID,[mov '\r\n']);
end
fprintf(fileID,'ENDPROC\r\n');
fprintf(fileID,'\r\n');
fprintf(fileID,'ENDMODULE\r\n');
fclose(fileID);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Convierte orientacion de MTH a quaternios 
% Entradas:
% R = Matriz de rotaci√≥n
% Salidas:
% q =  Vector de quaternios
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function q = R2Qua(R)
sign_q2 = 1;
sign_q3 = 1;
sign_q4 = 1;
if  sign(R(3,2)-R(2,3)) ~= 0
   sign_q2 = sign(R(3,2)-R(3,2));
end
if  sign(R(1,3)-R(3,1)) ~= 0
   sign_q3 = sign(R(1,3)-R(3,1));
end
if  sign(R(2,1)-R(1,2)) ~= 0
   sign_q4 = sign(R(2,1)-R(1,2));
end
q1 = (sqrt( R(1,1) + R(2,2) + R(3,3) +1 ) ) / (2);
q2 = sign_q2 * (sqrt( R(1,1) - R(2,2) - R(3,3) + 1 ) ) / (2);
q3 = sign_q3 * (sqrt( R(2,2) - R(1,1) - R(3,3) + 1 ) ) / (2);
q4 = sign_q4 * (sqrt( R(3,3) - R(1,1) - R(2,2) + 1 ) ) / (2);
q = [q1 q2 q3 q4];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Genera el robtarget
% Entradas:
% name = nombre del robtarget
% pos = posicion cartesiana
% q = orientacion en quaternios
% cfg = configuracion de la inversa
% Salidas:
% robtar = String con los parametros del robtarget
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function robtar = rob_tar_gen(name,pos,q,cfg)
s = ' ';
rt_1 = 'CONST robtarget';
rt_name = name;
rt_eq = ':=';
pos = round(pos,1);
rt_pos = ['[' num2str(pos(1)) ', ' num2str(pos(2)) ', ' num2str(pos(3)) ']'];
rt_ori = ['[' num2str(q(1)) ', ' num2str(q(2)) ', ' num2str(q(3)) ', ' num2str(q(4)) ']'];
rt_conf = ['[' num2str(cfg(1)) ', ' num2str(cfg(2)) ', ' num2str(cfg(3)) ', ' num2str(cfg(4)) ']'];
rt_exta = '[9e9, 9e9, 9e9, 9e9, 9e9, 9e9]';
robtar = [rt_1 s rt_name s rt_eq s '[ ' rt_pos ', ' rt_ori ', ' rt_conf ', ' rt_exta ' ]' ';'];


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Genera la instruccion de movimiento en RAPID
% Entradas:
% Ver comentarios
% Salidas:
% mov = String con la instruccion de movimiento
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function mov = mov_gen(varargin)
switch nargin
   % movType = Tipo de movimiento
   % robT = Robtarget de destino
   % vel = speeddata
   % zone = zonedata
   case 2
      movType = varargin{1};
      robt = varargin{2};
       
      if strcmp(movType,'J')
         movT = 'MoveJ';
      elseif strcmp(movType,'L')
         movT = 'MoveL';
      end
       
      s = ' ';
      veldata = 'v400';
      zonedata = 'z0';
      tooldata = 'tool0';
      wobj = 'wobj0';
      mov = [movT s robt ',' veldata ',' zonedata ',' tooldata '\\WObj:=' wobj ';'];
   case 4
      movType = varargin{1};
      robt = varargin{2};
      vel = varargin{3};
      zone = varargin{4};
       
      if strcmp(movType,'J')
         movT = 'MoveJ';
      elseif strcmp(movType,'L')
         movT = 'MoveL';
      end
       
      s = ' ';
      veldata = ['v' num2str(vel)];
      zonedata = ['z' num2str(zone)];
      tooldata = 'tool0';
      wobj = 'wobj0';
      mov = [movT s robt ',' veldata ',' zonedata ',' tooldata '\\WObj:=' wobj ';'];
       
   otherwise
      disp('wrong inputs')
end